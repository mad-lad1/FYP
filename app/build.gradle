apply plugin: 'com.android.application'
apply plugin: 'de.undercouch.download'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "org.tensorflow.lite.examples.detection"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    aaptOptions {
        noCompress "tflite"
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    lintOptions {
        abortOnError false
    }
    flavorDimensions "tfliteInference"
    productFlavors {
       // The TFLite inference is built using the TFLite Java API.
       interpreter {
           dimension "tfliteInference"
       }
       // The TFLite inference is built using the TFLite Task library.
       taskApi {
           dimension "tfliteInference"
       }
    }
    buildFeatures {
        mlModelBinding true
    }
}

// import DownloadModels task
project.ext.ASSET_DIR = projectDir.toString() + '/src/main/assets'
project.ext.TMP_DIR   = project.buildDir.toString() + '/downloads'

// Download default models; if you wish to use your own models then
// place them in the "assets" directory and comment out this line.
apply from:'download_model.gradle'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])
    implementation 'org.tensorflow:tensorflow-lite-support:0.1.0-rc1'
    implementation 'org.tensorflow:tensorflow-lite-metadata:0.1.0-rc1'
    implementation 'org.tensorflow:tensorflow-lite-gpu:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
  //  interpreterImplementation project(":lib_interpreter")
  //  taskApiImplementation project(":lib_task_api")
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'com.google.truth:truth:1.0.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    //Added for ROS interface
    // ROS
    implementation "org.ros.rosjava_core:rosjava:0.3.6"
    implementation "org.ros.rosjava_messages:diagnostic_msgs:1.12.7"
    implementation 'org.ros.rosjava_messages:geometry_msgs:1.12.7'
    implementation 'org.ros.rosjava_messages:nav_msgs:1.12.7'
    implementation 'org.ros.rosjava_messages:std_msgs:0.5.11'
    implementation 'org.ros.rosjava_messages:map_msgs:1.13.0'
    implementation 'org.ros.rosjava_messages:sensor_msgs:1.12.7'
    implementation 'org.ros.rosjava_bootstrap:message_generation:0.3.3'
    implementation 'org.ros.android_core:android_core_components:0.4.0'

    // Room
    implementation "androidx.room:room-runtime:2.2.5"
    annotationProcessor "androidx.room:room-compiler:2.2.5"

    // Parsing
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation project(path: ':jcraft')

    // Open Street Maps (e.g. for GPS)
    implementation 'org.osmdroid:osmdroid-android:6.1.6'

    // Playing Youtube Videos
    implementation 'com.pierfrancescosoffritti.androidyoutubeplayer:core:10.0.5'

}
